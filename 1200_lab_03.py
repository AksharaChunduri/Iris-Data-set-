# -*- coding: utf-8 -*-
"""1200_Lab_03.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WxiayTNYgS-obQVo1NK89YCg3aARQ0wj
"""

#1200-Lab-03
#Name: Akshara Chunduri Student ID: 100992816

# Import necessary libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report

# Load dataset
file_path = "/content/Iris.csv"  # Update if needed
df = pd.read_csv(file_path)

# Display the first few rows
print(df.head())

# Drop the "Id" column if present
if "Id" in df.columns:
    df.drop(columns=["Id"], inplace=True)

# Check for missing values
print("\nMissing Values:\n", df.isnull().sum())

# Encode categorical target variable
df["Species"] = df["Species"].astype("category").cat.codes

# Split dataset into features and target variable
X = df.drop(columns=["Species"])
y = df["Species"]

# Split data into train and test sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# Define the SVM model and hyperparameters for tuning
param_grid = {
    "C": [0.1, 1, 10],
    "kernel": ["linear", "rbf", "poly"],
    "gamma": ["scale", "auto"]
}

# Initialize SVM model
svm = SVC()

# Perform GridSearchCV to find the best hyperparameters
grid_search = GridSearchCV(svm, param_grid, cv=5, scoring="accuracy", verbose=1, n_jobs=-1)
grid_search.fit(X_train, y_train)

# Get the best hyperparameters and accuracy
print("\nBest Hyperparameters:", grid_search.best_params_)
print("\nBest Training Accuracy:", grid_search.best_score_)

# Train the best model on the entire training set
best_model = grid_search.best_estimator_
y_pred = best_model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print("\nTest Accuracy:", accuracy)
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Plot a heatmap of the confusion matrix
from sklearn.metrics import confusion_matrix
conf_matrix = confusion_matrix(y_test, y_pred)
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Greens", xticklabels=df["Species"].astype("category").cat.categories, yticklabels=df["Species"].astype("category").cat.categories)
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()